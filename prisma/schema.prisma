generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  status   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  roleId Int
  role   role? @relation(fields: [roleId], references: [id])

  whatsappId Int?
  whatsapp   whatsapps?  @relation(fields: [whatsappId], references: [id])
  tickets    tickets[]
  templates  templates[]
  calendar   calendar[]
  notify     notify[]
}

model role {
  id          Int    @id @default(autoincrement())
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  users           users[]
  rolePermissions rolePermission[]
}

model permissions {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  parent          Int?
  createdAt       DateTime         @default(now())
  parentRel       permissions?     @relation("ParentChild", fields: [parent], references: [id])
  children        permissions[]    @relation("ParentChild")
  rolePermissions rolePermission[]
}

model rolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       role        @relation(fields: [roleId], references: [id])
  permission permissions @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model whatsapps {
  id        Int      @id @default(autoincrement())
  name      String
  session   String?  @db.Text
  qrcode    String?  @db.Text
  status    String?
  battery   String?
  plugged   Boolean?
  retries   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  users   users[]
  tickets tickets[]
}

model contacts {
  id            Int      @id @default(autoincrement())
  name          String
  number        String
  profilePicUrl String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  email         String?
  patientId     Int?

  tickets  tickets[]
  messages messages[]
}

model tickets {
  id             Int      @id @default(autoincrement())
  status         String
  lastMessage    String?  @db.Text
  isGroup        Int?
  unreadMessages Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  whatsappId Int
  whatsapp   whatsapps @relation(fields: [whatsappId], references: [id])

  userId Int
  user   users @relation(fields: [userId], references: [id])

  contactId Int
  contact   contacts @relation(fields: [contactId], references: [id])

  queueId Int?
  // Messages Messages[]
}

model messages {
  id        Int      @id @default(autoincrement())
  body      String   @db.Text
  ack       Int?
  read      Int
  mediaType String
  mediaUrl  String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  fromMe   Int
  isDelete Int?

  // ticketId Int
  // ticket   Tickets @relation(fields: [ticketId], references: [id])

  contactId Int
  contact   contacts @relation(fields: [contactId], references: [id])
}

model templates {
  id          Int        @id @default(autoincrement())
  name        String     @db.Text
  message     String     @db.Text
  type        Int
  contentType Int
  file        String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  userId      Int
  user        users      @relation(fields: [userId], references: [id])
  calendar    calendar[]
}

model calendar {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  timeStart   String
  timeEnd     String?
  category    String
  status      String
  deleted     Boolean  @default(false)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  userId         Int
  user           users            @relation(fields: [userId], references: [id])
  historySending historySending[]

  templateId Int?
  template   templates? @relation(fields: [templateId], references: [id])
}

model historySending {
  id          Int      @id @default(autoincrement())
  namePatient String
  patientId   String
  phone       String
  status      String
  createdAt   DateTime @default(now())

  calendarId Int
  calendar   calendar @relation(fields: [calendarId], references: [id])
}

model notify {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  status    String
  type      String
  userId    Int
  user      users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
